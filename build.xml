<?xml version="1.0" encoding="UTF-8"?>

<project default="hello" basedir=".">

    <!-- Import & Override environment configuration -->

    <if>
        <isset property="build.env" />
        <then>
            <!--<echo message="Overwriting default.properties with ${build.env}.properties" />-->
            <property file="${project.basedir}/build/phing/env/${build.env}.properties" override="true" />
        </then>
        <else>
            <echo message="Parameter 'build.env' not set. Using DEFAULT.properties configuration..." />
        </else>
    </if>
    <property file="${project.basedir}/build/phing/env/default.properties" />

    <!-- Import Phing macros -->
    <import file="/data/web_docs/upload/build/macros.xml" />

    <target name="hello">
        <echo message="This script deploys the current branch to a chosen environment." />
        <echo message="Usage: deploy &lt;environment (uat/production)&gt;" />
    </target>
    
    <!-- ============================================  -->
    <!-- Target: prepare                               -->
    <!-- ============================================  -->
    <target name="prepare" depends="git-has-remote,git-dirty" description="[ MAIN ] Stack changes for release">
        <fail unless="build.source" message="Required parameter 'build.source' missing..." />
        <if>
            <equals arg1="${git.dirty}" arg2="*" trim="true" />
            <then>
                <fail msg="Working tree is dirty! Please commit/stash your changes."></fail>
            </then>
        </if>


        <if>
            <equals arg1="${git.has.remote}" arg2="*" trim="true" />
            <then>
                <trycatch>
                    <try>
                        <gitpull
                            repository="${project.dir}"
                            refspec="${build.source}"
                            rebase="false" />
                    </try>
                    <catch>
                        <phingcall target="git-reset">
                            <property name="checkin.repo" value="${project.dir}" />
                        </phingcall>
                        <fail msg="It appears there were some conflicts during the last merge. Please resolve them before you continue. Execute 'git pull' &amp; resolve ..........." />
                    </catch>
                </trycatch>

            </then>
        </if>
        <trycatch>
            <try>
                <gitpush
                    repository="${project.dir}"
                    refspec="${build.source}"
                />
            </try>
            <catch>
                <fail msg="Unable to push your changes" />
            </catch>
        </trycatch>
    </target>

    <!-- ============================================  -->
    <!-- Target: deploy                                -->
    <!-- ============================================  -->
    <target name="deploy" depends="prepare" description="[ MAIN ] Deploy release branch on build environment">
        <fail unless="build.source" message="Required parameter 'build.source' missing..." />
        <!-- Perform versioning feature release -->
        <trycatch>
            <try>
                <phingcall target="git-merge">
                    <property name="merge.repo" value="${project.dir}" />
                    <property name="merge.source" value="${build.source}" />
                    <property name="merge.target" value="${build.branch}" />
                </phingcall>
            </try>
            <catch>
                <fail msg="Unable to merge your changes into the desired branch (${build.branch}). Merge ${build.branch} into ${build.source} to ensure fast forward" />
            </catch>
        </trycatch>

        <if>
            <equals arg1="${upload.method}" arg2="ftp" trim="true" />
            <then>
                <phingcall target="deploy-ftp-application">
                </phingcall>
            </then>
            <else>
                <phingcall target="deploy-rsync-application">
                </phingcall>
            </else>
        </if>

        <if>
            <equals arg1="${upload.initial}" arg2="initial" trim="true" />
            <then>
                <if>
                    <equals arg1="${project.application}" arg2="admintool4" trim="true" />
                    <then>
<echo message="Make sure you:" />
<echo message="1. Edit the .env file" />
<echo message="2. Change the path to the framework in index.php:" />
<echo message="require __DIR__.'/framework/bootstrap/autoload.php';" />
<echo message="$app = require_once __DIR__.'/framework/bootstrap/app.php';" />
<echo message="$app->bind('path.public', function() { return __DIR__; });" />
<echo message="3. Edit framework/config/elfinder.php > 'path'          => realpath(__DIR__.'/../public/uploads'), if needed" />

                    </then>
                </if>
            </then>
        </if>

    </target>

</project>
